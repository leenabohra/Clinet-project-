SYNOPSYS WORK USER INPUT #modules need for the script import os import shutil import subprocess # Function to set the DESIGNWARE_HOME environment variable def set_designware_home(): use_internal_designware = input("Do you need internal DESIGNWARE_HOME? (y/n): ").lower() if use_internal_designware == 'y': os.environ["DESIGNWARE_HOME"] = "/global/apps/dw_latest/" print("DESIGNWARE_HOME set to:", os.environ['DESIGNWARE_HOME']) elif use_internal_designware == 'n': local_path = input("Specify local DESIGNWARE_HOME path: ") os.environ['DESIGNWARE_HOME'] = local_path print("DESIGNWARE_HOME set to", os.environ['DESIGNWARE_HOME']) # Function to install .run files def install_run_files(designware_home): global_designware_home = "/global/apps/dw_latest/" if 'DESIGNWARE_HOME' not in os.environ or os.environ['DESIGNWARE_HOME'] != global_designware_home: product = input("Enter the VIP product(s) (e.g., uart_svt, i2c_svt, amba_svt): ") version = input("Enter the version# (e.g., T-2022.09, U-2023.06): ") vip_run_file = f"/slowfs/viprel/images/published/vip_{product}{version}.run" os.system(f"cp {vip_run_file} .") os.system(f"{os.path.join(os.path.basename(vip_run_file))} --dir {os.environ['DESIGNWARE_HOME']}") print("VIP installation completed.") return product else: print("Global DESIGNWARE_HOME already set. No installation required.") # Function to extract design_dirs def extract_design_dirs(product): extract_dirs = input("Does design_dir(s) extraction required? (y/n): ").lower() if extract_dirs == 'y': dw_vip_setup = os.path.join(os.environ["DESIGNWARE_HOME"],"bin","dw_vip_setup") command = f"{dw_vip_setup} -i home" if not os.path.exists(dw_vip_setup): print(f"dw_vip_setup not found at {dw_vip_setup}. Please make sure the file exists.") return product subprocess.run(command, shell=True) global_designware_home = "/global/apps/dw_latest/" example_extract = input("example extraction required? (y/n): ").lower() if example_extract == 'y': if 'DESIGNWARE_HOME' not in os.environ or os.environ['DESIGNWARE_HOME'] != global_designware_home: default_version = input("Take Default example (y/n): ").lower() if default_version == 'y': example_name = f"tb"+product+"uvm_basic_sys" # Replace ** with the appropriate version print("example_name:",example_name) os.system(f"$DESIGNWARE_HOME/bin/dw_vip_setup -e "+product+"/"+example_name+ " -p proj_dir -svtb") dirc_path = (f"proj_dir/examples/sverilog/{product}/{example_name}") os.chdir(dirc_path) return else: product = input("enter product: ") example_name = input("enter example name: ") os.system(f"$DESIGNWARE_HOME/bin/dw_vip_setup -e "+product+"/"+example_name+ " -p proj_dir -svtb") dirc_path = (f"proj_dir/examples/sverilog/{product}/{example_name}") os.chdir(dirc_path) #complete example dirc path: to do else: path_input = input("provide the explicit path: ") os.system(f"{path_input}") dirc_path = input("Enter the change directory path: ") os.chdir(dirc_path) # Function to select the simulator def select_simulator(): simulator_options = ['VCS', 'NCV', 'MTI'] default_simulator = 'VCS' simulator = input("Which simulator do you use? (VCS/NCV/MTI): ").upper() if simulator_options == 'VCS': simulator = 'vcsvlog' os.system("module load vcs") elif simulator_options == 'NCV': simulator = 'ncvlog' os.system("module load xcelium") elif simulator_options == 'MTI': simulator = 'mtivlog' os.system("module load mti") else: simulator = 'vcsvlog' # Default to VCS if an invalid option is provided return simulator if simulator not in simulator_options: print(f"Invalid simulator option. Defaulting to {default_simulator}.") simulator = default_simulator os.system("module load vcs") return simulator # Function to set compile time options #To do : editting the file #copyfile() or copyfileobj() = append the file def set_compile_options(simulator): choice = input("Do you need to set compile time options? (y/n): ") if choice.lower() == "y": option_key = "" if simulator == "VCS": option_key = "vcs_build_options" open("gvim vcs_build_options") elif simulator == "NCV": option_key = "ncv_build_options" open("gvim ncv_build_options") elif simulator == "MTI": option_key = "mti_build_options" open("gvim mti_build_options") if option_key: options = input(f"Enter compile time options for {simulator}: ") with open("gvim {option_key}", "a") as f: f.write(f"{option_key} = {options}\n") def set_runtime_options(simulator): choice = input("Do you need to set runtime options? (y/n): ") if choice.lower() == "y": option_key = "" if simulator == "VCS": option_key = "vcs_run_options" open("gvim vcs_build_options") elif simulator == "NCV": option_key = "ncv_run_options" open("gvim vcs_build_options") elif simulator == "MTI": option_key = "mti_run_options" open("gvim vcs_build_options") if option_key: options = input(f"Enter runtime options for {simulator}: ") with open("gvim {option_key}", "a") as f: f.write(f"{option_key} = {options}\n") def perform_license_or_sanity_test(simulator): test_type = input("Do you need to perform any license(l) test or sanity(s) test? (l/s): ").lower() if test_type == 'l': key_names = input("Enter the key names: ") os.environ["SLI_DEBUG_SERVER"] = "1" os.environ["SLI_DEBUG_CLIENT"] = "1" os.environ["FLEXLM_DIAGNOSTICS"] = "3" os.environ["DW_LICENSE_OVERRIDE"] = key_names test_name = input("Enter the test name: ") # not clear why it is needed subprocess.run(["gmake", test_name], shell=True) os.system(f"gmake USE_SIMULATOR={simulator} {test_name}") # Replace "random_test" with the correct test name elif test_type == "s": test_names = input("Enter example test: ") os.system(f"gmake USE_SIMULATOR={simulator} {test_names}") test_name = True # Example pass status, modify as needed if test_name: result = "Test Passed" else: result = "Test Failed" #To do : def process_log_files(): test_name = True # Example pass status, modify as needed if test_name: result = "Test Passed" print(result) else: result = "Test Failed" print(result) return result # Main function def main(): designware_home = set_designware_home() product = install_run_files(designware_home) # Get the product value from install_run_files path_input = extract_design_dirs(product) simulator = select_simulator() set_compile_options(simulator) set_runtime_options(simulator) perform_license_or_sanity_test(simulator) process_log_files() if __name_ == "_main": main() FILE BASEED INPUT import os import subprocess import sys def read_config_file(file_path): config = {} with open(file_path, "r") as file: for line in file: if not line.startswith("#") and "=" in line: key, value = line.strip().split("=") config[key.strip()] = value.strip() return config # Function to set the DESIGNWARE_HOME environment variable def set_designware_home(use_internal_designware, designware_home): #use_internal_designware = if use_internal_designware == 'y': os.environ["DESIGNWARE_HOME"] = "/global/apps/dw_latest/" print("DESIGNWARE_HOME set to:", os.environ['DESIGNWARE_HOME']) elif use_internal_designware == 'n': #local_path = input("Specify local DESIGNWARE_HOME path: ") os.environ['DESIGNWARE_HOME'] = designware_home print("DESIGNWARE_HOME set to", os.environ['DESIGNWARE_HOME']) # Function to install .run files def install_run_files(enter_product, enter_version,designware_home): global_designware_home = "/global/apps/dw_latest/" if 'DESIGNWARE_HOME' not in os.environ or os.environ['DESIGNWARE_HOME'] != global_designware_home: #enter_product = input("Enter the VIP enter_product(s) (e.g., uart_svt, i2c_svt, amba_svt): ") #enter_version = input("Enter the enter_version# (e.g., T-2022.09, U-2023.06): ") vip_run_file = f"/slowfs/viprel/images/published/vip{enter_product}{enter_version}.run" #change dir os.chdir(designware_home) os.system(f"cp {vip_run_file} .") os.system(f"{os.path.join(os.path.basename(vip_run_file))} --dir .") print("VIP installation completed.") return enter_product else: print("Global DESIGNWARE_HOME already set. No installation required.") # Function to extract design_dirs def extract_design_dirs(extract_dirs_required,example_extract_required,enter_product,example_name): if extract_dirs_required == 'y': dw_vip_setup = os.path.join(os.environ["DESIGNWARE_HOME"],"bin","dw_vip_setup") command = f"{dw_vip_setup} -i home" if not os.path.exists(dw_vip_setup): print(f"dw_vip_setup not found at {dw_vip_setup}. Please make sure the file exists.") return enter_product subprocess.run(command, shell=True) global_designware_home = "/global/apps/dw_latest/" if example_extract_required == 'y': if 'DESIGNWARE_HOME' not in os.environ or os.environ['DESIGNWARE_HOME'] != global_designware_home: #default_enter_version = input("Take Default example (y/n): ").lower() #if default_enter_version == 'y': enter_example_name = f"tb"+enter_product+"_uvm_basic_sys" # Replace ** with the appropriate enter_version print("example_name:",example_name) os.system(f"$DESIGNWARE_HOME/bin/dw_vip_setup -e "+enter_product+"/"+example_name+ " -p proj_dir -svtb") dirc_path = (f"proj_dir/examples/sverilog/{enter_product}/{example_name}") os.chdir(dirc_path) return else: if example_extract_required == 'n': enter_product = input("enter enter_product: ") enter_example_name = input("enter example name: ") os.system(f"$DESIGNWARE_HOME/bin/dw_vip_setup -e "+enter_product+"/"+example_name+ " -p proj_dir -svtb") dirc_path = (f"proj_dir/examples/sverilog/{enter_product}/{example_name}") os.chdir(dirc_path) # Function to select the simulator def select_simulator(simulator): simulator_options = ['VCS', 'NCV', 'MTI'] default_simulator = 'VCS' if simulator_options == 'VCS': simulator = 'vcsvlog' os.system("module load vcs") elif simulator_options == 'NCV': simulator = 'ncvlog' os.system("module load xcelium") elif simulator_options == 'MTI': simulator = 'mtivlog' os.system("module load mti") else: simulator = 'vcsvlog' # Default to VCS if an invalid option is provided return simulator if simulator not in simulator_options: print(f"Invalid simulator option. Defaulting to {default_simulator}.") simulator = default_simulator os.system("module load vcs") return simulator # Function to set compile time options def set_compile_options (simulator,compile_options_required): if compile_options_required .lower() == "y": option_key = "" if simulator == "VCS": option_key = "vcs_build_options" open("gvim vcs_build_options") subprocess.run(["gvim", "vcs_build_options"]) elif simulator == "NCV": option_key = "ncv_build_options" open("gvim ncv_build_options") subprocess.run(["gvim", "ncv_build_options"]) elif simulator == "MTI": option_key = "mti_build_options" open("gvim mti_build_options") subprocess.run(["gvim", "mti_build_options"]) if option_key: options = input(f"Enter compile time options for {simulator}: ") with open("gvim {option_key}", "a") as f: f.write(f"{option_key} = {options}\n") set_compile_options_required .exit(0) def set_runtime_options(simulator,runtime_options_required): if runtime_options_required.lower() == "y": option_key = "" if simulato